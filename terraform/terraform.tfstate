{
  "version": 4,
  "terraform_version": "1.3.7",
  "serial": 430,
  "lineage": "097a9ffa-e301-b154-a225-a08cf3b56a26",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "k8s_master_node",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": true,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/debian-11-bullseye-v20221206",
                    "labels": {
                      "my_label": "value"
                    },
                    "size": 10,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/strong-pursuit-372520/zones/europe-west9-a/disks/k8s-master-0"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/strong-pursuit-372520/zones/europe-west9-a/instances/k8s-master-0",
            "instance_id": "5147423538981851070",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-small",
            "metadata": null,
            "metadata_fingerprint": "s5Kt38Fh75I=",
            "metadata_startup_script": "if [ -e flag ]\nthen\necho \"Already executed script\"\nelse\ntouch flag\n#general config for both files\nsudo bash\nusermod -d /root root\napt-get update -y\nswapoff -a\n\necho \".................................. installing Docker\"\napt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n\nsudo mkdir -p /etc/apt/keyrings\n\ncurl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null\n\nsudo apt-get remove -y --purge man-db\n\napt-get update -y\n\napt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\n\necho \".................................. installing Kubernetes\"\nmodprobe br_netfilter\n\ncat \u003c\u003cEOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\n\nsysctl --system\n\ncurl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -\n\ncat \u003c\u003cEOF | sudo tee /etc/apt/sources.list.d/kubernetes.list\ndeb https://apt.kubernetes.io/ kubernetes-xenial main\nEOF\n\napt-get update\napt-get install -y kubelet=1.25.5-00 kubeadm=1.25.5-00 kubectl=1.25.5-00\n\n#rewriting the whole file instead of adding to it (I don't know how :( )\n\ncat \u003c\u003cEOF | sudo tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n# Note: This dropin only works with kubeadm and kubelet v1.11+\n[Service]\nEnvironment=\"KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf\"\nEnvironment=\"KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml --cgroup-driver=cgroupfs\"\n# This is a file that \"kubeadm init\" and \"kubeadm join\" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically\nEnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env\n# This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use\n# the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.\nEnvironmentFile=-/etc/default/kubelet\nExecStart=\nExecStart=/usr/bin/kubelet \\$KUBELET_KUBECONFIG_ARGS \\$KUBELET_CONFIG_ARGS \\$KUBELET_KUBEADM_ARGS \\$KUBELET_EXTRA_ARGS\nEOF\n\n#master specific config\nsudo rm /etc/containerd/config.toml\nsudo systemctl restart containerd\necho 1 \u003e /proc/sys/net/ipv4/ip_forward\nkubeadm init --pod-network-cidr=10.244.0.0/16\n\n# Configure kubectl\nmkdir -p $HOME/.kube\ncp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nchown $(id -u):$(id -g) $HOME/.kube/config\n\n# Configure kubectl\nmkdir -p /root/.kube\ncp -i /etc/kubernetes/admin.conf /root/.kube/config\nchown $(id -u):$(id -g) /root/.kube/config\n\nkubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml\n\nkubeadm token create psqpzd.x1xqf66114wr1rpw\n\nsleep 1m\n\ncat \u003c\u003c EOF | sudo tee /components-metric-server.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    k8s-app: metrics-server\n  name: metrics-server\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  labels:\n    k8s-app: metrics-server\n    rbac.authorization.k8s.io/aggregate-to-admin: \"true\"\n    rbac.authorization.k8s.io/aggregate-to-edit: \"true\"\n    rbac.authorization.k8s.io/aggregate-to-view: \"true\"\n  name: system:aggregated-metrics-reader\nrules:\n- apiGroups:\n  - metrics.k8s.io\n  resources:\n  - pods\n  - nodes\n  verbs:\n  - get\n  - list\n  - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  labels:\n    k8s-app: metrics-server\n  name: system:metrics-server\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - nodes/metrics\n  verbs:\n  - get\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  - nodes\n  verbs:\n  - get\n  - list\n  - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  labels:\n    k8s-app: metrics-server\n  name: metrics-server-auth-reader\n  namespace: kube-system\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: extension-apiserver-authentication-reader\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  labels:\n    k8s-app: metrics-server\n  name: metrics-server:system:auth-delegator\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  labels:\n    k8s-app: metrics-server\n  name: system:metrics-server\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:metrics-server\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    k8s-app: metrics-server\n  name: metrics-server\n  namespace: kube-system\nspec:\n  ports:\n  - name: https\n    port: 443\n    protocol: TCP\n    targetPort: https\n  selector:\n    k8s-app: metrics-server\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    k8s-app: metrics-server\n  name: metrics-server\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      k8s-app: metrics-server\n  strategy:\n    rollingUpdate:\n      maxUnavailable: 0\n  template:\n    metadata:\n      labels:\n        k8s-app: metrics-server\n    spec:\n      containers:\n      - args:\n        - --cert-dir=/tmp\n        - --secure-port=4443\n        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname\n        - --kubelet-use-node-status-port\n        - --metric-resolution=15s\n        - --kubelet-insecure-tls\n        image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2\n        imagePullPolicy: IfNotPresent\n        livenessProbe:\n          failureThreshold: 3\n          httpGet:\n            path: /livez\n            port: https\n            scheme: HTTPS\n          periodSeconds: 10\n        name: metrics-server\n        ports:\n        - containerPort: 4443\n          name: https\n          protocol: TCP\n        readinessProbe:\n          failureThreshold: 3\n          httpGet:\n            path: /readyz\n            port: https\n            scheme: HTTPS\n          initialDelaySeconds: 20\n          periodSeconds: 10\n        resources:\n          requests:\n            cpu: 100m\n            memory: 200Mi\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          runAsNonRoot: true\n          runAsUser: 1000\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-dir\n      nodeSelector:\n        kubernetes.io/os: linux\n      priorityClassName: system-cluster-critical\n      serviceAccountName: metrics-server\n      volumes:\n      - emptyDir: {}\n        name: tmp-dir\n---\napiVersion: apiregistration.k8s.io/v1\nkind: APIService\nmetadata:\n  labels:\n    k8s-app: metrics-server\n  name: v1beta1.metrics.k8s.io\nspec:\n  group: metrics.k8s.io\n  groupPriorityMinimum: 100\n  insecureSkipTLSVerify: true\n  service:\n    name: metrics-server\n    namespace: kube-system\n  version: v1beta1\n  versionPriority: 100\nEOF\n\nsudo kubectl apply -f /components-metric-server.yaml\n\nsudo kubectl proxy \u0026\n\nmkdir /spark\ncd /spark\n\n#docker pull boujahamza/cluster-apache-spark\n\ncat \u003c\u003cEOF | sudo tee /spark/controller-master.yaml\nkind: ReplicationController\napiVersion: v1\nmetadata:\n  name: spark-master-controller\nspec:\n  replicas: 1\n  selector:\n    component: spark-master\n  template:\n    metadata:\n      labels:\n        component: spark-master\n    spec:\n      hostname: spark-master-hostname\n      subdomain: spark-master-headless\n      containers:\n        - name: spark-master\n          image: kienmn97/test_spark_kubernetes:2.4.5\n          imagePullPolicy: Always\n          command: [\"/start-master\"]\n          ports:\n            - containerPort: 7077\n            - containerPort: 8080\n          resources:\n            requests:\n              cpu: 100m\nEOF\n\ncat \u003c\u003cEOF | sudo tee /spark/service-master.yaml\nkind: Service\napiVersion: v1\nmetadata:\n  name: spark-master-headless\nspec:\n  ports:\n  clusterIP: None\n  selector:\n    component: spark-master\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: spark-master\nspec:\n  ports:\n    - port: 7077\n      targetPort: 7077\n      name: spark\n    - port: 8080\n      targetPort: 8080\n      name: http\n  selector:\n    component: spark-master\nEOF\n\ncat \u003c\u003cEOF | sudo tee /spark/deployment-ui.yaml\nkind: ReplicationController\napiVersion: v1\nmetadata:\n  name: spark-ui-proxy-controller\nspec:\n  replicas: 1\n  selector:\n    component: spark-ui-proxy\n  template:\n    metadata:\n      labels:\n        component: spark-ui-proxy\n    spec:\n      containers:\n        - name: spark-ui-proxy\n          image: kienmn97/spark-ui-proxy:1.0.0\n          ports:\n            - containerPort: 80\n          resources:\n            requests:\n              cpu: 100m\n          args:\n            - spark-master:8080\n          livenessProbe:\n              httpGet:\n                path: /\n                port: 80\n              initialDelaySeconds: 120\n              timeoutSeconds: 5\nEOF\n\ncat \u003c\u003cEOF | sudo tee /spark/service-ui.yaml\nkind: Service\napiVersion: v1\nmetadata:\n  name: spark-ui-proxy\nspec:\n  ports:\n    - port: 80\n      targetPort: 80\n  selector:\n    component: spark-ui-proxy\n  type: LoadBalancer\nEOF\n\ncat \u003c\u003cEOF | sudo tee /spark/controller-worker.yaml\nkind: ReplicationController\napiVersion: v1\nmetadata:\n  name: spark-worker-controller\nspec:\n  replicas: 2\n  selector:\n    component: spark-worker\n  template:\n    metadata:\n      labels:\n        component: spark-worker\n    spec:\n      containers:\n        - name: spark-worker\n          image: kienmn97/test_spark_kubernetes:2.4.5\n          imagePullPolicy: Always\n          command: [\"/start-worker\"]\n          ports:\n            - containerPort: 8081\n          resources:\n            requests:\n              cpu: 100m\nEOF\n\nsudo kubectl create -f controller-master.yaml\nsudo kubectl create -f service-master.yaml\nsudo kubectl create -f deployment-ui.yaml\nsudo kubectl create -f service-ui.yaml\nsudo kubectl create -f controller-worker.yaml\n\nsleep 30s\n\ndocker run -d \\\n        --net=\"host\" \\\n        --name 'kube-opex-analytics' \\\n        -v /var/lib/kube-opex-analytics:/data \\\n        -e KOA_DB_LOCATION=/data/db \\\n        -e KOA_K8S_API_ENDPOINT=http://127.0.0.1:8001 \\\n        boujahamza/kube-opex-mod\n\n\nfi",
            "min_cpu_platform": "",
            "name": "k8s-master-0",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "34.155.55.129",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/strong-pursuit-372520/global/networks/default",
                "network_ip": "10.200.15.208",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/strong-pursuit-372520/regions/europe-west9/subnetworks/default",
                "subnetwork_project": "strong-pursuit-372520"
              }
            ],
            "project": "strong-pursuit-372520",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "instance_termination_action": "",
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/strong-pursuit-372520/zones/europe-west9-a/instances/k8s-master-0",
            "service_account": [],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "timeouts": null,
            "zone": "europe-west9-a"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "random_string.token_1",
            "random_string.token_2"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "k8s_slave_node",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": true,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/debian-11-bullseye-v20221206",
                    "labels": {
                      "my_label": "value"
                    },
                    "size": 10,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/strong-pursuit-372520/zones/europe-west9-a/disks/k8s-slave-0"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/strong-pursuit-372520/zones/europe-west9-a/instances/k8s-slave-0",
            "instance_id": "6176296135993282480",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-small",
            "metadata": {
              "install-kubernetes": "true"
            },
            "metadata_fingerprint": "Z11vRf8Cxjo=",
            "metadata_startup_script": "if [ -e flag ]\nthen\necho \"Already executed script\"\nelse\ntouch flag\n#general config for both files\nsudo bash\nusermod -d /root root\napt-get update -y\nswapoff -a\n\necho \".................................. installing Docker\"\napt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n\nsudo mkdir -p /etc/apt/keyrings\n\ncurl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null\n\nsudo apt-get remove -y --purge man-db\n\napt-get update -y\n\napt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\n\necho \".................................. installing Kubernetes\"\nmodprobe br_netfilter\n\ncat \u003c\u003cEOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\n\nsysctl --system\n\ncurl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -\n\ncat \u003c\u003cEOF | sudo tee /etc/apt/sources.list.d/kubernetes.list\ndeb https://apt.kubernetes.io/ kubernetes-xenial main\nEOF\n\napt-get update\napt-get install -y kubelet=1.25.5-00 kubeadm=1.25.5-00 kubectl=1.25.5-00\n\n#rewriting the whole file instead of adding to it (I don't know how :( )\n\ncat \u003c\u003cEOF | sudo tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n# Note: This dropin only works with kubeadm and kubelet v1.11+\n[Service]\nEnvironment=\"KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf\"\nEnvironment=\"KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml --cgroup-driver=cgroupfs\"\n# This is a file that \"kubeadm init\" and \"kubeadm join\" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically\nEnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env\n# This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use\n# the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.\nEnvironmentFile=-/etc/default/kubelet\nExecStart=\nExecStart=/usr/bin/kubelet \\$KUBELET_KUBECONFIG_ARGS \\$KUBELET_CONFIG_ARGS \\$KUBELET_KUBEADM_ARGS \\$KUBELET_EXTRA_ARGS\nEOF\n\nsudo rm /etc/containerd/config.toml\nsudo systemctl restart containerd\necho 1 \u003e /proc/sys/net/ipv4/ip_forward\n\nwait\nsleep 1m\n\n#slave specific config\nsudo kubeadm join 10.200.15.208:6443 --token psqpzd.x1xqf66114wr1rpw --discovery-token-unsafe-skip-ca-verification\n\nfi",
            "min_cpu_platform": "",
            "name": "k8s-slave-0",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "34.155.2.47",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/strong-pursuit-372520/global/networks/default",
                "network_ip": "10.200.0.31",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/strong-pursuit-372520/regions/europe-west9/subnetworks/default",
                "subnetwork_project": "strong-pursuit-372520"
              }
            ],
            "project": "strong-pursuit-372520",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "instance_termination_action": "",
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/strong-pursuit-372520/zones/europe-west9-a/instances/k8s-slave-0",
            "service_account": [],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "timeouts": null,
            "zone": "europe-west9-a"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_instance.k8s_master_node",
            "random_string.token_1",
            "random_string.token_2"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": true,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/debian-11-bullseye-v20221206",
                    "labels": {
                      "my_label": "value"
                    },
                    "size": 10,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/strong-pursuit-372520/zones/europe-west9-a/disks/k8s-slave-1"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/strong-pursuit-372520/zones/europe-west9-a/instances/k8s-slave-1",
            "instance_id": "4660390443937124272",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-small",
            "metadata": {
              "install-kubernetes": "true"
            },
            "metadata_fingerprint": "Z11vRf8Cxjo=",
            "metadata_startup_script": "if [ -e flag ]\nthen\necho \"Already executed script\"\nelse\ntouch flag\n#general config for both files\nsudo bash\nusermod -d /root root\napt-get update -y\nswapoff -a\n\necho \".................................. installing Docker\"\napt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n\nsudo mkdir -p /etc/apt/keyrings\n\ncurl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null\n\nsudo apt-get remove -y --purge man-db\n\napt-get update -y\n\napt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\n\necho \".................................. installing Kubernetes\"\nmodprobe br_netfilter\n\ncat \u003c\u003cEOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\n\nsysctl --system\n\ncurl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -\n\ncat \u003c\u003cEOF | sudo tee /etc/apt/sources.list.d/kubernetes.list\ndeb https://apt.kubernetes.io/ kubernetes-xenial main\nEOF\n\napt-get update\napt-get install -y kubelet=1.25.5-00 kubeadm=1.25.5-00 kubectl=1.25.5-00\n\n#rewriting the whole file instead of adding to it (I don't know how :( )\n\ncat \u003c\u003cEOF | sudo tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n# Note: This dropin only works with kubeadm and kubelet v1.11+\n[Service]\nEnvironment=\"KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf\"\nEnvironment=\"KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml --cgroup-driver=cgroupfs\"\n# This is a file that \"kubeadm init\" and \"kubeadm join\" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically\nEnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env\n# This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use\n# the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.\nEnvironmentFile=-/etc/default/kubelet\nExecStart=\nExecStart=/usr/bin/kubelet \\$KUBELET_KUBECONFIG_ARGS \\$KUBELET_CONFIG_ARGS \\$KUBELET_KUBEADM_ARGS \\$KUBELET_EXTRA_ARGS\nEOF\n\nsudo rm /etc/containerd/config.toml\nsudo systemctl restart containerd\necho 1 \u003e /proc/sys/net/ipv4/ip_forward\n\nwait\nsleep 1m\n\n#slave specific config\nsudo kubeadm join 10.200.15.208:6443 --token psqpzd.x1xqf66114wr1rpw --discovery-token-unsafe-skip-ca-verification\n\nfi",
            "min_cpu_platform": "",
            "name": "k8s-slave-1",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "34.155.250.75",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/strong-pursuit-372520/global/networks/default",
                "network_ip": "10.200.0.32",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/strong-pursuit-372520/regions/europe-west9/subnetworks/default",
                "subnetwork_project": "strong-pursuit-372520"
              }
            ],
            "project": "strong-pursuit-372520",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "instance_termination_action": "",
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/strong-pursuit-372520/zones/europe-west9-a/instances/k8s-slave-1",
            "service_account": [],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "timeouts": null,
            "zone": "europe-west9-a"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_instance.k8s_master_node",
            "random_string.token_1",
            "random_string.token_2"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_string",
      "name": "token_1",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "id": "psqpzd",
            "keepers": null,
            "length": 6,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "numeric": true,
            "override_special": null,
            "result": "psqpzd",
            "special": false,
            "upper": false
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_string",
      "name": "token_2",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "id": "x1xqf66114wr1rpw",
            "keepers": null,
            "length": 16,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "numeric": true,
            "override_special": null,
            "result": "x1xqf66114wr1rpw",
            "special": false,
            "upper": false
          },
          "sensitive_attributes": []
        }
      ]
    }
  ],
  "check_results": null
}
